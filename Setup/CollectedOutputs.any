/* Standard output is chosen from the classtemplate with the 
INCLUDE statements below. Generic MetaData is added here, and
model specific metadata is included by opening into this folder
from your specific model.

INCLUDE_LEG_MUSCLES = "On",
INCLUDE_LEG_JOINT_REACTION_FORCE = "On",
INCLUDE_LEG_JOINT_MOMENT = "On",
INCLUDE_LEG_JOINT_ANGLE = "On",
INCLUDE_TRUNK_JOINT_REACTION_FORCE = "Off",
INCLUDE_TRUNK_JOINT_MOMENT = "Off"
*/



CollectedOuputs_template  CollectedOuputs()
= {
  
//  AnyVar test = 0;
//  
//  MetaData = {
//    // subject specific constants/MetaData
//    AnyFloat BodyMass = Main.ModelSetup.SubjectSpecificData.Anthropometrics.BodyMass;
//    AnyFloat BodyHeight = Main.ModelSetup.SubjectSpecificData.Anthropometrics.BodyHeight;
//    AnyFloat ThighLengthIni = Main.ModelSetup.SubjectSpecificData.Anthropometrics.ThighLengthIni;
//    AnyFloat ShankLengthIni = Main.ModelSetup.SubjectSpecificData.Anthropometrics.ShankLengthIni;
//    AnyFloat FootLengthIni = Main.ModelSetup.SubjectSpecificData.Anthropometrics.FootLengthIni;
//    AnyFloat PelvisWidthIni = Main.ModelSetup.SubjectSpecificData.Anthropometrics.PelvisWidthIni;
//    AnyFloat HeadHeightIni = Main.ModelSetup.SubjectSpecificData.Anthropometrics.HeadHeightIni;
//    AnyFloat NeckLengthIni = Main.ModelSetup.SubjectSpecificData.Anthropometrics.NeckLengthIni;
//    AnyFloat TrunkHeightIni = Main.ModelSetup.SubjectSpecificData.Anthropometrics.TrunkHeightIni;
//    AnyFloat TrunkWidthIni = Main.ModelSetup.SubjectSpecificData.Anthropometrics.TrunkWidthIni;
//    AnyFloat UpperArmLengthIni = Main.ModelSetup.SubjectSpecificData.Anthropometrics.UpperArmLengthIni;
//    AnyFloat LowerArmLengthIni = Main.ModelSetup.SubjectSpecificData.Anthropometrics.LowerArmLengthIni;
//    AnyFloat HandLengthIni = Main.ModelSetup.SubjectSpecificData.Anthropometrics.HandLengthIni;
//    AnyFloat HandBreadthIni = Main.ModelSetup.SubjectSpecificData.Anthropometrics.HandBreadthIni;
//    
//    
//    // BM statements
//    //AnyFolder &BM_Config = Main.HumanModel.Config.Values; // This would work, if the folder dump, worked throughout the folders.
//    
//    // Definition of an anthropometric scaling law
//AnyIntVar value_BM_SCALING=BM_SCALING;
//
//// File with all anthropometric measurements
//// AnyStringVar value_BM_SCALING_ANTHRO_FILE=BM_SCALING_ANTHRO_FILE;
//
//// Custom anthopometric scaling law, used when BM_SCALING is CONST_SCALING_CUSTOM.
//// AnyStringVar value_BM_SCALING_MY_FILE=BM_SCALING_MY_FILE;
//
//// Switch for automatic display of all configuration values
//AnyIntVar value_BM_CONFIG_MESSAGES=BM_CONFIG_MESSAGES;
//
//// Switch for enabling configuration value information in the model tree
//AnyIntVar value_BM_CONFIG_VALUES=BM_CONFIG_VALUES;
//
//// A file with draw settings
//// AnyStringVar value_BM_DRAWSETTINGS_FILE=BM_DRAWSETTINGS_FILE;
//
//// A flag to switch on/off inclusion of the draw settings (may be needed in case of two human models)
//AnyIntVar value_BM_DRAWSETTINGS_SKIP=BM_DRAWSETTINGS_SKIP;
//
//// Switch defining left leg model and its presence
//AnyStringVar value_BM_LEG_LEFT=BM_LEG_LEFT;
//
//// Switch defining right leg model and its presence
//AnyStringVar value_BM_LEG_RIGHT=BM_LEG_RIGHT;
//
//// Index parameter to specify muscle strength for lower extremities
//AnyFloatVar value_BM_LEG_STRENGTH_INDEX=BM_LEG_STRENGTH_INDEX;
//
//// Parameter to define muscle behavior of both right and left leg
//AnyIntVar value_BM_LEG_MUSCLES_BOTH=BM_LEG_MUSCLES_BOTH;
//
//// Parameter to define muscle behavior of the left leg
//AnyIntVar value_BM_LEG_MUSCLES_LEFT=BM_LEG_MUSCLES_LEFT;
//
//// Parameter to define muscle behavior of the right leg
//AnyIntVar value_BM_LEG_MUSCLES_RIGHT=BM_LEG_MUSCLES_RIGHT;
//
//// Parameter for the TLEM model version.
//AnyStringVar value_TLEM_VERSION=TLEM_VERSION;
//
//// Parameter for the morphology method for the TLEM model.
//AnyIntVar value_TLEM_MORPHOLOGY=TLEM_MORPHOLOGY;
//
//
//// Index parameter to specify strength for trunk muscles.
//AnyFloatVar value_BM_TRUNK_STRENGTH_INDEX=BM_TRUNK_STRENGTH_INDEX;
//
//// Switch for detailed neck model.
//AnyIntVar value_BM_TRUNK_NECK=BM_TRUNK_NECK;
//
//// Definition of the trunk muscles type.
//AnyIntVar value_BM_TRUNK_MUSCLES=BM_TRUNK_MUSCLES;
//
//// A switch to control presence of lumbar spine ligaments.
//AnyIntVar value_BM_TRUNK_LUMBAR_LIGAMENTS=BM_TRUNK_LUMBAR_LIGAMENTS;
//
//// Index parameter to specify muscle strength for upper extremities.
//AnyFloatVar value_BM_ARM_STRENGTH_INDEX=BM_ARM_STRENGTH_INDEX;
//
//// Switch for the left arm model being present or not.
//AnyIntVar value_BM_ARM_LEFT=BM_ARM_LEFT;
//
//// Keyword for the type of left hand.
//AnyIntVar value_BM_ARM_DETAIL_HAND_LEFT=BM_ARM_DETAIL_HAND_LEFT;
//
//// Switch for the shoulder rhythm constraints for the left arm being present or not.
//AnyIntVar value_BM_ARM_SHOULDER_RHYTHM_LEFT=BM_ARM_SHOULDER_RHYTHM_LEFT;
//
//// Switch for the right arm model being present or not.
//AnyIntVar value_BM_ARM_RIGHT=BM_ARM_RIGHT;
//
//// Keyword for the type of right hand.
//AnyIntVar value_BM_ARM_DETAIL_HAND_RIGHT=BM_ARM_DETAIL_HAND_RIGHT;
//
//// Switch for the shoulder rhythm constraints for the right arm being present or not.
//AnyIntVar value_BM_ARM_SHOULDER_RHYTHM_RIGHT=BM_ARM_SHOULDER_RHYTHM_RIGHT;
//
//// Keyword for the muscle model type for both left and right arms.
//AnyIntVar value_BM_ARM_MUSCLES_BOTH=BM_ARM_MUSCLES_BOTH;
//
//// Keyword for the muscle model type for the left arm.
//AnyIntVar value_BM_ARM_MUSCLES_LEFT=BM_ARM_MUSCLES_LEFT;
//
//// Keyword for the muscle model type for only the left neck muscle.
//AnyIntVar value_BM_ARM_MUSCLES_ONLY_ON_NECK_LEFT=BM_ARM_MUSCLES_ONLY_ON_NECK_LEFT;
//
//// Keyword for the muscle model for both the right arm.
//AnyIntVar value_BM_ARM_MUSCLES_RIGHT=BM_ARM_MUSCLES_RIGHT;
//
//// Keyword for the muscle model type for only the right neck muscle.
//AnyIntVar value_BM_ARM_MUSCLES_ONLY_ON_NECK_RIGHT=BM_ARM_MUSCLES_ONLY_ON_NECK_RIGHT;
//
//// Keyword for the interface morhping between the trunk and the leg pelvis segments.
//AnyIntVar value_BM_LEG_TRUNK_INTERFACE=BM_LEG_TRUNK_INTERFACE;
//
//// Keyword to choose the option of the joint axes defintion based on the anatomical landmarks.
//AnyIntVar value_BM_BONY_LANDMARK_DEFINED_JOINTAXIS=BM_BONY_LANDMARK_DEFINED_JOINTAXIS;
//
//// Keyword for pelvis display setting.
//AnyIntVar value_BM_PELVIS_DISPLAY=BM_PELVIS_DISPLAY;
//
//// File name of the mannequin definition file. Default is a file in the body model, but this can be copied to and modified in your model directory.
//// AnyStringVar value_BM_MANNEQUIN_FILE=BM_MANNEQUIN_FILE;
//
//// Setting of the default value for all mannequin drivers.
//AnyIntVar value_BM_MANNEQUIN_DRIVER_DEFAULT=BM_MANNEQUIN_DRIVER_DEFAULT;
//
//// By default constraint type of mannequin drivers will be soft.
//AnyIntVar value_BM_MANNEQUIN_DRIVER_WEAK_SWITCH=BM_MANNEQUIN_DRIVER_WEAK_SWITCH;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_POS_X=BM_MANNEQUIN_DRIVER_PELVIS_POS_X;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_POS_Y=BM_MANNEQUIN_DRIVER_PELVIS_POS_Y;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_POS_Z=BM_MANNEQUIN_DRIVER_PELVIS_POS_Z;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_ROT_Z=BM_MANNEQUIN_DRIVER_PELVIS_ROT_Z;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_ROT_Y=BM_MANNEQUIN_DRIVER_PELVIS_ROT_Y;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_ROT_X=BM_MANNEQUIN_DRIVER_PELVIS_ROT_X;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_NECK=BM_MANNEQUIN_DRIVER_NECK;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_THORAX_LATERAL_BENDING=BM_MANNEQUIN_DRIVER_PELVIS_THORAX_LATERAL_BENDING;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_THORAX_ROTATION=BM_MANNEQUIN_DRIVER_PELVIS_THORAX_ROTATION;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_THORAX_EXTENSION=BM_MANNEQUIN_DRIVER_PELVIS_THORAX_EXTENSION;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT=BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_RIGHT=BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_RIGHT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_RIGHT=BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_RIGHT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_RIGHT=BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_RIGHT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_RIGHT=BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_RIGHT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_RIGHT=BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_RIGHT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_WRIST_FLEXION_RIGHT=BM_MANNEQUIN_DRIVER_WRIST_FLEXION_RIGHT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_RIGHT=BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_RIGHT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT=BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_LEFT=BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_LEFT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_LEFT=BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_LEFT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_LEFT=BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_LEFT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_LEFT=BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_LEFT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_LEFT=BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_LEFT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_WRIST_FLEXION_LEFT=BM_MANNEQUIN_DRIVER_WRIST_FLEXION_LEFT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_LEFT=BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_LEFT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_HIP_FLEXION_RIGHT=BM_MANNEQUIN_DRIVER_HIP_FLEXION_RIGHT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_RIGHT=BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_RIGHT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_RIGHT=BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_RIGHT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_KNEE_FLEXION_RIGHT=BM_MANNEQUIN_DRIVER_KNEE_FLEXION_RIGHT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_RIGHT=BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_RIGHT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_RIGHT=BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_RIGHT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_RIGHT=BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_RIGHT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_HIP_FLEXION_LEFT=BM_MANNEQUIN_DRIVER_HIP_FLEXION_LEFT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_LEFT=BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_LEFT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_LEFT=BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_LEFT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_KNEE_FLEXION_LEFT=BM_MANNEQUIN_DRIVER_KNEE_FLEXION_LEFT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_LEFT=BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_LEFT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_LEFT=BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_LEFT;
//
//// Switch for the mannequin driver being active or not
//AnyIntVar value_BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_LEFT=BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_LEFT;
//
//// A switch to use different ref. frame than the default global reference frame
//AnyIntVar value_BM_GLOBAL_REFERENCE_FRAME_SWITCH=BM_GLOBAL_REFERENCE_FRAME_SWITCH;
//    
//    
//  };
  
  
}; 

